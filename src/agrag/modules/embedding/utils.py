from typing import List

import torch


def pool(embeddings: List[torch.Tensor], pooling_strategy: str) -> List[torch.Tensor]:
    """
    Applies the specified pooling strategy to the embeddings.
    The pooling strategies supported are:
    - 'mean': Mean pooling of token embeddings.
    - 'max': Max pooling of token embeddings.
    - 'cls': Using the embedding of the CLS token.
    - None: No pooling, the input embeddings are returned as is.

    Parameters:
    ----------
    embeddings : List[torch.Tensor]
        A list of token embeddings generated by the Huggingface model. Each element in the list is a tensor of shape
        [batch_size, sequence_length, hidden_size].

    Returns:
    -------
    torch.Tensor
        A tensor of pooled embeddings according to the specified strategy. The output shape depends on the pooling
        strategy:
        - 'mean', 'cls', and 'max': [batch_size, hidden_size]
        - None: [batch_size, sequence_length, hidden_size]
    """
    if pooling_strategy == "mean":
        embeddings = embeddings.mean(dim=1)
    elif pooling_strategy == "max":
        embeddings = embeddings.max(dim=1).values
    elif pooling_strategy == "cls":
        embeddings = embeddings[:, 0, :]
    elif pooling_strategy:
        raise NotImplementedError("Provided pooling strategy not implemented")
    return embeddings
